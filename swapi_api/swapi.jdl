application {
  config {
    baseName swapi_api
    applicationType monolith
    packageName com.swapi
    buildTool gradle
    authenticationType jwt
    clientFramework react
    databaseType sql
    devDatabaseType h2Memory 
  }
  entities *
  service all with serviceImpl
}

@readOnly
entity Vehicle {
    id Long
    created ZonedDateTime
    edited ZonedDateTime    

    name String
    model String
    manufacturer String
    costInCredits Long
    length Integer
    maxAtmospheringSpeed Integer
    crew Integer
    passengers Integer
    cargoCapacity Long
    consumables String
    vehicleClass String    
}

@readOnly
entity Starship {
	id Long
    created ZonedDateTime
    edited ZonedDateTime    

	name String
    model String
    manufacturer String
    costInCredits Long
    length Integer
    maxAtmospheringSpeed Integer
    crew Integer
    passengers Integer
    cargoCapacity Long
    consumables String
    hyperdriveRating Double
    mglt Integer
    startshipClass String	
}

@readOnly
entity Species {
	id Long
    created ZonedDateTime
    edited ZonedDateTime    

	name String
	classification String
    designation String
    averageHeight Integer
    skinColors String
    hairColors String
    eyeColors String
    averageLifespan Integer
    languages String
}

@readOnly
entity Person {
	id Long
    created ZonedDateTime
    edited ZonedDateTime    
    
	name String
	height Integer
	mass Double
	hairColor String
	skinColor String
	eyeyColor String
	birthYear String
    gender String
}

@readOnly
entity Film {
	id Long
    created ZonedDateTime
    edited ZonedDateTime    

	title String
    episodeId Integer
    openingCrawl String
    director String
    producer String
    releaseDate LocalDate
}

@readOnly
entity Planet {
	id Long
    created ZonedDateTime
    edited ZonedDateTime    

	name String
	rotationPeriod Integer
	orbitalPeriod Integer
    diameter Integer
    climate String
    gravity String
    terrain String
    surfaceWater Integer
    population Long    
}

relationship ManyToMany {
	Film{planets} to Planet{films}
    Film{characters} to Person{films}
    Film{startships} to Starship{films}
    Film{vehicles} to Vehicle{films}
    Film{species} to Species{films}
}

relationship ManyToMany {
	Person{species} to Species{persons}
    Person{vehicles} to Vehicle{pilots}
    Person{starships} to Starship{pilots}

}

relationship ManyToOne {
	Person{homeworld} to Planet
    Species{homeworld} to Planet
}

// Set pagination options
//paginate JobHistory, Employee with infinite-scroll
//paginate Job with pagination

// Use Data Transfer Objects (DTO)
// dto * with mapstruct

// Set service options to all except few
// service all with serviceImpl

// Set an angular suffix
// angularSuffix * with mySuffix
